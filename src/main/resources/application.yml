spring:
    jpa:
        hibernate:
          ddl-auto: update
          naming:
            physical-strategy: org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl
        show_sql: true
#        format_sql: true
        properties:
          dialect: org.hibernate.dialect.MySQL5Dialect
    datasource:
        url: jdbc:mysql://localhost:3306/testerbase
        username: root
        password: mmmm


logging:
    level:
      org:
        springframework:
          security: info
        hibernate: info
      com: debug
      root: info
    pattern:
      console: "%d{yyyy-MMM-dd HH:mm:ss.SSS} %-5level [%thread] %logger{15} - %msg%n"



#jdbc.driverClassName = com.mysql.jdbc.Driver
#jdbc.url = jdbc:mysql://localhost:3306/testerbase
#jdbc.username = root
#jdbc.password = mmmm
#hibernate.dialect = org.hibernate.dialect.MySQL5Dialect
#spring.jpa.show_sql = true
#spring.jpa.format_sql = true
#spring.jpa.hibernate.hbm2ddl.auto = create
#hibernate.enable_lazy_load_no_trans = true

#spring.datasource.url=jdbc:mysql://localhost:3306/testerbase
#spring.datasource.type=org.
#spring.datasource.username=root
#spring.datasource.password=
#spring.datasource.platform=mysql
#spring.datasource.max-active=100
#spring.datasource.name=lime
#spring.database.driverClassName=com.mysql.jdbc.Driver


# DataSource settings: set here your own configurations for the database
# connection. In this example we have "netgloo_blog" as database name and
# "root" as username and password.
#spring.datasource.url = jdbc:mysql://localhost:3306/testerbase
#spring.datasource.username = root
#spring.datasource.password = mmmm

# Keep the connection alive if idle for a long time (needed in production)
#spring.datasource.testWhileIdle = true
#spring.datasource.validationQuery = SELECT 1

# Show or not log for each sql query
#spring.jpa.show-sql = true

# Hibernate ddl auto (create, create-drop, update)
#spring.jpa.hibernate.ddl-auto = update

# Naming strategy
#spring.jpa.hibernate.naming.physical-strategy = org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl

# Use spring.jpa.properties.* for Hibernate native properties (the prefix is
# stripped before adding them to the entity manager)

# The SQL dialect makes Hibernate generate better SQL for the chosen database
#spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.MySQL5Dialect


#Logging Settings //no time to use YAML, so here goes
#logging.level.org.springframework.security= info
#logging.level.org.hibernate= info
#logging.level.com=DEBUG
#logging.level.root=info


#logging.pattern.console= %d{yyyy-MMM-dd HH:mm:ss.SSS} %-5level [%thread] %logger{15} - %msg%n
